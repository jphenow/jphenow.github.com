<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: development | JPhenow]]></title>
  <link href="http://jphenow.com/blog/categories/development/atom.xml" rel="self"/>
  <link href="http://jphenow.com/"/>
  <updated>2012-12-06T14:45:20-06:00</updated>
  <id>http://jphenow.com/</id>
  <author>
    <name><![CDATA[Jon Phenow]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How I Started Using Spree and RefineryCMS Together]]></title>
    <link href="http://jphenow.com/blog/2012/10/12/an-introduction-to-mixing-refinery-and-spree/"/>
    <updated>2012-10-12T13:16:00-05:00</updated>
    <id>http://jphenow.com/blog/2012/10/12/an-introduction-to-mixing-refinery-and-spree</id>
    <content type="html"><![CDATA[<p><a href="http://refinerycms.com/">RefineryCMS</a>
is a great boilerplate for creating a CMS in Rails.
It basically gives you all the structure you need to build a custom CMS,
with lots of features built in and extensions to add.
<a href="http://spreecommerce.com/">Spree</a> offers similar
benefits but directed at being a shopping cart web application. I wanted to use
both of these tools in tandem.</p>

<p>I tried a number of things in an attempt to mix the two together in one unifying
application. Finally I stumbled across
<a href="https://github.com/adrianmacneil/spree-refinery-authentication">spree-refinery-authentication</a>.
This gem not only explains how to put the two things under one application, but
gives you the ability to have both authentication systems work together.</p>

<p>To get this basic merge, I literally just followed the steps on spree-refiner-authentication
README and I was off. I still have some work to do to make the two cooperate seemlessly
for an end-user, but more posts to come as I'm able to work through this.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[First Ruby/Rails impressions and a script to have you hit-the-ground-running]]></title>
    <link href="http://jphenow.com/blog/2011/10/25/an-rvm-script-that-hits-the-ground-running/"/>
    <updated>2011-10-25T23:26:00-05:00</updated>
    <id>http://jphenow.com/blog/2011/10/25/an-rvm-script-that-hits-the-ground-running</id>
    <content type="html"><![CDATA[<p>In the past couple weeks I have been stupid kinds of obsessed with working on a <a href="http://rubyonrails.org/">Ruby on Rails</a> application. The application idea came from a brother, but the awkward choice of RoR actually came from just hearing about Ruby on Rails. This seems odd - why attack a potentially complex problem with a new thing you might not fully understand. Well, that may be a good way to go about things in general, but I have this weird need to learn new things and Ruby on Rails just seems to be one of those ever exploding technologies. The farther I get into it the more I see that such an observation proves correct.</p>

<p>Ruby on Rails has such a great community around it which is largely in love with the <a href="http://github.com">Github</a> awesomeness. Ruby allows quick installation of modules - even a module that will track your installations and check dependencies - most of which (if not all) is open source, generally available somewhere on github. There are great sites for <a href="http://railscasts.com/">tutorials</a> and even <a href="http://ruby.learncodethehardway.org/">free books</a> to get you up and running the fast way. Basically I'm in love with it. Even as I continually learn the <a href="http://www.ruby-lang.org/en/">Ruby</a> language further I'm blown away. They're both (Ruby and Rails) so beautiful to work with. Not only do Ruby and Rails allow your actual code to look pretty (clean, clean, concise <a href="http://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY</a>) but, personally, I think the actual code syntax is pretty and easy to work with.</p>

<p>One thing I have learned about Ruby in the past few weeks is that a lot of people of projects on different versions of Ruby or they are using modules in specific versions - specific versions they'd prefer not change without their expressed consent. <a href="http://wayneseguin.us/">Someone</a> decided to go and impress everyone with a <a href="http://beginrescueend.com/">Ruby Version Manager</a>. With this little gem (that's a pun!) developers can now (per user or system-wide) install specific versions of Ruby and have specific sets of those modules (Gems) I mentioned earlier - allowing them to do version locks and keep projects separate without needing to create complications when switching between projects (unless your that anomaly of a developer that only has one project). Actually my favorite part about rvm is that you don't actually <strong>need</strong> to switch your Gemsets (that's what those groups of modules/versions of Ruby are called) manually between projects. You can simply have a file per project (one little file) that tells that projects which Gemset to use. How cool is that?!</p>

<p>Well I'll be honest, I don't have more than one Ruby project at a time, or one that requires different Gemsets, so I just like rvm for the ease of installation. This is an especially nice feature since I operate on more than one computer and more than one of those I cannot install packages via <code>sudo apt-get install ruby...</code> (or <code>pacman -S ruby</code> for you hipsters). So I went ahead and wrote a script that does that "hard" work for me. There's a little install <a href="http://beginrescueend.com/rvm/install/">tutorial</a> and shortly thereafter I wanted to at least begin a script people could use to make that installation EVEN easier (wasn't sure it was possible). Really all it does is:</p>

<ul>
<li>make some simple checks</li>
<li>install rvm via git</li>
<li>add some source magic to your bash_profile</li>
<li>setup ruby 1.9.2 (latest at the moment)</li>
<li>setup a gemset called rails31</li>
<li>install rails 3.1.1 to that gemset</li>
<li>away you go!</li>
</ul>


<p><div><script src='https://gist.github.com/1313611.js?file='></script>
<noscript><pre><code>#!/bin/bash
#
# This script is for settingup a usable rvm environment for ruby development
# Enables user to manage versions of ruby and sets of Gems in a clean manner
#
# Information on rvm is available at http://beginrescueend.com/

git=&quot;git&quot;
rvm=&quot;rvm&quot;
rvmdir=&quot;$HOME/.rvm&quot;

if [[ -d &quot;${rvmdir}&quot; ]]; then
	read -p &quot;WARNING: Removing any current ~/.rvm Okay? (y/n): &quot;
	[ &quot;$REPLY&quot; == &quot;y&quot; ] &amp;&amp; echo &quot;Continuing...&quot; || { echo &quot;Okay, exitting then...&quot;; exit 1; }
	rm -rf ~/.rvm
	echo &quot;&quot;
fi

command -v $git &gt;/dev/null &amp;&amp; echo &quot;$git found, good to go&quot; || { echo &quot;$git not found, required to continue. \n Please install $git&quot;; exit 1; }

bash &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer )

# ATTENTION if your .bash_profile is not sourced by default on new bash session either change file or make sure its loaded
echo &quot;Adding rvm command to your bash_profile&quot;
type -P $rvm &amp;&gt;/dev/null &amp;&amp; echo &quot;rvm already found in PATH moving on...&quot; || { echo '[[ -s &quot;$HOME/.rvm/scripts/rvm&quot; ]] &amp;&amp; . &quot;$HOME/.rvm/scripts/rvm&quot; # Load RVM function' &gt;&gt; ~/.bashrc; echo &quot;Added to your bashrc&quot; }

echo &quot;&quot;
echo &quot;Attempting to source our new command (rvm)&quot;
source $HOME/.rvm/scripts/rvm

# Should output =&gt; rvm is a function
# If there is an issue here its likely there was an issue loading our command
# otherwise check that ~/.rvm was successfully created
# May want to follow this script by hand if having issues down here
type -P $rvm &amp;&gt;/dev/null &amp;&amp; echo &quot;New $rvm command found! Moving on...&quot; || { echo &quot;Can't access $rvm command&quot;; exit 1; }

# TODO Want to check `rvm requirements` - will need to see if there is much in the way
# of exit statuses for the command before attempting
#rvm requirements #To ensure dependencies are met

# Install a Ruby version
echo &quot;Attempting to install Ruby 1.9.2 and our default gem...&quot;
rvm install 1.9.2

# Set as the version we're using
echo &quot;&quot;
echo &quot;Setting 1.9.2 as default...&quot;
rvm use 1.9.2 --default

# Create a sandbox for Gems
echo &quot;&quot;
echo &quot;Creating default gemset (rails31)&quot;
rvm gemset create rails31

# Add our Ruby version to the gemset
echo &quot;&quot;
echo &quot;Adding to a new default gemset (rails31)&quot;
rvm 1.9.2@rails31 --default

# Install two important, common gems
echo &quot;&quot;
echo &quot;Installing Rails 3.1.1 and Bundler to our gemset&quot;
gem install rails -v 3.1.1

# Top it off
echo &quot;That should do it, now you can:&quot;
echo -e &quot;\t* Download a project and run 'bundle install' and start working with it&quot;
echo -e &quot;\t* Run 'rails new [appname]; cd [appname]; bundle install' and experiment&quot;
echo -e &quot;\t* Checkout http://ruby.learncodethehardway.org/book/ if you need to learn Ruby first&quot;
echo &quot;You'll likely want to either run 'source ~/.bashrc' now or exit your terminal and open it again&quot;
</code></pre></noscript></div>
</p>

<p>Use at your own discretion, but really it shouldn't do anying harmful and if you're just looking to start experimenting, I encourage it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developer Interview Lessons]]></title>
    <link href="http://jphenow.com/blog/2011/09/12/lessons-from-a-job-opportunity/"/>
    <updated>2011-09-12T11:18:00-05:00</updated>
    <id>http://jphenow.com/blog/2011/09/12/lessons-from-a-job-opportunity</id>
    <content type="html"><![CDATA[<p>Finding jobs in any economic climate is stressful, but that doesn't mean you can't give it your all and go after whatever looks interesting. Sure, you'll likely get turned down a few times, but you might end up in an extremely fulfilling and interesting position. I've recently been approaching such a situation. Let's start with some back story though.</p>

<p>To those of you who might know me I'm a Senior Computer Science undergraduate at Saint John's University (Collegeville, not New York). However what most don't know is that I only need a two credit class next semester to graduate, which means I may not need to be a full-time student next semester. That's not to say I wouldn't love an easy last semester outside of the real world, but if I can find a job I find it hard to pay the gross amount of money it costs to go here full-time. Anyways, I'm the type of person who really has a tough time doing things I don't love. I love some very nerdy things, but some things I can't put up with. This is why I've started looking now, so I can try to feel out my options, or somehow have options at all.</p>

<p>Well in the past few weeks I actually have had such opportunities and I figured I'd share with anyone looking to be in developer position my take-aways. Boy did I have a thing or two to learn about interviewing for developer positions. One thing to take note of is that depending on the actual industry the interviewing company is in. The Civil Engineering firm and Financial firm I've done internships for had surprisingly business-like interviews:</p>

<ul>
<li>Can you talk?</li>
<li>Are you personable?</li>
<li>Can you at least present yourself as if you know what you're talking about?</li>
</ul>


<p>Yea, it can be that simple. My theory for why this is is two-fold. First, a lot of smaller, non-computer-technical companies simply don't know how to hire for such a position. They don't know to get a code sample from you, how to view that sample, there are so many things they simply can't and won't do for that process. Second, if this is a huge corporate company they couldn't give a damn what you already know - they just want to know that you think logically enough to work things out so they can train you to do things their way. These are the places I can't handle, personally, because (in the little experience I have with them) I find extreme inconsistency and just poor practice throughout most projects I've come across. I end up wanting to clean up their mess and yet, obviously, you can't because you'll break something and cause havoc.</p>

<p>Let's switch to the other extreme. I interviewed for a Silicon Valley tech company recently. Not a contracting developer house, a place that made their name on their application. This was my first real developer interview, which was actually probably my biggest mistake. I spoke over the phone with their HR rep a few times, then I was presented with a code challenge which, with no time contraints, I was to develop a little program that would basically attempt to spell check some common errors at O(n). Things to note up until this point:</p>

<ul>
<li>If they give no constraint on a project, do it fast</li>
<li>Document your code like never before</li>
<li>No repetition, use methods</li>
<li>Structure as well as you can</li>
<li>Use a language you really understand

<ul>
<li>Not only syntax but core benefits</li>
<li>Don't take 2 days to pick a language</li>
</ul>
</li>
</ul>


<p>To my surprise, I did well on this first part. After this I was told I would have a Skype call with a developer on their team, here comes the real stress. The guy called 10 to 15 minutes late from our original appointment and there was obviously some Thursday afternoon festivities taking place in the background. We did short introductions then opened up a collaborative, browser-based text editor and he said "pick a language and write me a stack." Now I was told this would be a technical interview but I felt like I got hit by a car. Obviously any CS student should understand how to do this, but I was not expecting this for some reason. So I quickly wrote the most simplistic stack I've ever seen in Java. We walked through different scenarios and as we talked I reworked the code. Finally he asked me how, if we have a stack of integers, I would most-quickly get the minimum. I froze - if you can't tell by now, I'm not someone who can code when I know someone is watching. We eventually talked about the answer (duh, keep a second array for tracking minimums), I asked some questions about his work and we departed. I got an email the next day, from the HR rep, with a polite "See ya next time." This was brutal, but I feel lucky to have learned some things from them:</p>

<ul>
<li>Don't let the interviewer's attitude rattle you

<ul>
<li>It sucks, but you have to suck it up and deal</li>
</ul>
</li>
<li>Relax

<ul>
<li>Learn to code with others watching</li>
</ul>
</li>
<li>Review, in your head, basic concepts before such an interview

<ul>
<li>Companies seem to like to remind you that fundamentals are important</li>
</ul>
</li>
<li>Admit things you don't know</li>
<li>Ask questions, be interested, but don't be desperate</li>
</ul>


<p>Finally, we come to most recent attempt. I received an unexpected call from an online application for a more local developer contractor. I spoke with HR about setting up a time to come and interview with their hunter, we set up the for the earliest date I could get in. I entered the eerily casual offices in my shirt and tie to meet the people I feel at home with, nerds. I spoke with their extremely fun-to-talk-to hunter for awhile about my progression to becoming a developer - experience with teams, size of projects, etc.. I asked some questions about their business, what a day looks like for a dev until we had some time to tour the office. These tech company offices are very fun - stalked with food, caffeine, very open and friendly. We shook hands and he told me they'd like to give me a code challenge. The next day I received a challenge involving setting up a web application that would connect to a SOAP server. They listed details such as what should be validated, rules for end users, etc.. Pretty straightforward - I even got to pick my favorite framework flavor! So I sketched a basic outline of the app and away we go. I had a week to present a clean project so sleep was mostly out the window with school/student job starting. I pounded something clean enough out and turned in a day early, because there was no way I'd have any more time to work on it. I loved this project - this is the work I live for, but obviously I did some things wrong so let's have a look:</p>

<ul>
<li>Be personable - even its a dev company people need to be able to communicate well</li>
<li>Don't forget your original knowledge around projects of this nature

<ul>
<li>Example: Web application means validate the heck out of text fields</li>
<li>Its tempting to blindly follow the specs and forget how to handle something like a web app</li>
</ul>
</li>
<li>Check that your server is able to perform all you require

<ul>
<li>I realized late on that my PHP5 install was not compiled with SOAP</li>
</ul>
</li>
<li>Do things that make sense

<ul>
<li>Example: if there's an HTML table being filled, sort it</li>
</ul>
</li>
<li>Re-read the specs before turning in

<ul>
<li>You may think you remember it all after reading it 1000 times, but you don't</li>
</ul>
</li>
</ul>


<p>So no, I didn't get this latest job, but I'll admit, I'm no professional PHP developer. Their reviewer pointed out some gaping holes that I'll admit I could've taken care of. Really part of the problem is my lack of experience which is why I don't see not getting a job as a failure. I learned a ton from the reviewer's notes on my application and I can use that to make myself a better developer. That's one big thing people need to take from such interviews - learn from them, don't get upset. Take what you can from an interview, get feedback, evolve yourself. Also note that a lot of developer houses prefer hiring people they know, people they see at conferences and open houses - make yourself a familiar face in the community of developers.</p>

<p>I hope this was as helful for you to read as it was for me to write!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Prompt That Does the Job]]></title>
    <link href="http://jphenow.com/blog/2011/08/30/a-prompt-that-does-the-job/"/>
    <updated>2011-08-30T21:05:00-05:00</updated>
    <id>http://jphenow.com/blog/2011/08/30/a-prompt-that-does-the-job</id>
    <content type="html"><![CDATA[<p>I was delighted enough to stumble across a great explanation on boosting your development environment some time ago and I've continued to work away with forming it to my own tastes. As of late I have not been able to find this great guide I had used, but I implemented most of its changes which are lingering on my <a href="https://github.com/jphenow/home_config/blob/master/.bashrc">.bashrc</a>, I suggest taking a gander.</p>

<p>Back to the real reason for the post though. One of my favorite features of my latest bashrc edits is the fact that I can see my curren't working branch in the prompt when I'm under a working git directory. This was great and all it needs is a simple tool, that seems to come with most git installs, <code>__git_ps1</code>. So with this I was able to edit my current <code>PS1</code> setting to something like:</p>

<p>``` bash</p>

<pre><code>PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[0;36m\]$(__git_ps1 "(%s)")\[\033[01;34m\] \w \$\[\033[00m\] '
</code></pre>

<p>```</p>

<p>But of course, the important part to note is the <code>$( __git_ps1 "(%s)" )</code> which uses this simple little git tool to take care of our magic. This worked great for me for a long time, but alas times changed. I came upon a work computer that had no such tool (<code>__git_ps1</code>). I was upset to see that upon every new prompt (between <em>every</em> single command) I received a lovely error notifying me that <strong>SOMETHING DOESN'T WORK</strong>. So I spent some time attempting to remedy this.</p>

<p>Luckily I was able to set aside a little time to at least hide errors when we come across one such computer that for some silly reason doesn't have this little golden tool:</p>

<p>``` bash</p>

<pre><code>PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[0;36m\]$(git_ps1 "(%s)")\[\033[01;34m\] \w \$\[\033[00m\] '

git_ps1 ()
{
    __git_ps1 1&gt;/dev/null 2&gt;/dev/null # Grab exit status of an attempted run
    err=$?
    if [ "$err" == "0" ]; then # If you can find tool
        ps=$( __git_ps1 "(%s)" )
        echo -ne "$ps" # Execute me some magic
    else # :( no cool stuff for this run
        echo -ne "" # Don't show me errors
    fi
}
</code></pre>

<p>```</p>

<p>So I just run it once hoping to find the exit status of attempting to run the tool then, based on that we can decide if we should use it on the prompt. Pretty simple!</p>

<p>Next on the free-time-y docket:
* Clean the PS1 setting
* Setup some simpler vars for colors
* Throw reusables of all of the bashrc into some methods</p>

<p>Happy hacking!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Wordpress Plugin development]]></title>
    <link href="http://jphenow.com/blog/2011/05/29/wordpress-plugin-development/"/>
    <updated>2011-05-29T00:00:00-05:00</updated>
    <id>http://jphenow.com/blog/2011/05/29/wordpress-plugin-development</id>
    <content type="html"><![CDATA[<p>Well I've decided to keep the site like this now. I found a way to make this style doable and it seems silly to continually seek out the most minimalist style when I could just use what I have and do something useful with time. Speaking of being useful with my time; I've been working on a Wordpress plugin that makes it easy to display some article properties in a nice way. When working with a friend of mine to create a blogging site in which we introduce a number of Open Source programs and tutorial them for our readers. After writing a few articles we realized something: not everyone writes at the same level; that is, some of us expect more from our readers. We also noticed that some of our applications weren't totally cross platform. This sparked an idea for a Wordpress plugin. To simplify telling our readers, easily, what platforms and how difficult an article or tutorial will be.</p>

<p>First, I read the introduction <a title="Writing a plugin" href="http://codex.wordpress.org/Writing_a_Plugin" target="_blank">Codex page</a> for plugin development. This directed me across several of the Wordpress documentation pages so that I could find a basic understanding for how to approach my plugin. This was my first real plugin for something so I was very interested to see how the general idea is handled. Since its a plugin and you want someone to be able Install and Activate and start using, with no further customization. To a certain extent this seems limiting from a developer perspective because you cannot intervene anywhere else in your code to get your plugin to work, because if you had to do that then anyone else installing and using your plugin would have to get their hands dirty to get the plugin to work.</p>

<p>So Wordpress handles plugins by allowing developers to "hook" functions to standard Wordpress functions. For instance, when someone loads a Wordpress page there is a function called "the_content" that is run, which calls to the database and gets all of the content for that post/page. Without going into details about header information I must have this in php file:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">plugin_content</span> <span class="p">(</span> <span class="nx">$str</span> <span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">$str</span> <span class="o">=</span> <span class="s2">&quot;Hello plugin&quot;</span> <span class="o">+</span> <span class="nx">$str</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="nx">$str</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span> <span class="s1">&#39;the_content&#39;</span><span class="p">,</span> <span class="s1">&#39;plugin_content&#39;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Quick notice: we gain access to the post content by using a parameter, Wordpress doesn't make it too obvious that you have access to such parameters, but as far as I can tell, you have access to what the attachable function's return. That is, here we have access to what the_content() would return. You want to be sure to return the one parameter you accept. <a title="Actions" href="http://codex.wordpress.org/Plugin_API#Actions" target="_blank">Some explanation</a></p>

<p>This simple plugin will add "Hello plugin" at the beginning of each post content on loading each page. It will not alter the database information, but will only add the content on loading of each post. Part of the beauty of plugins is that we don't have to screw up a user's database in the process. One thing you may realize is that this is only part of what we need in a plugin like I want to achieve. I want something where each post has its own properties, that stick with that post. So we need to also handle usage of meta boxes on the post. Here there are a few options: let the user utilize meta boxes without guidance (dangerous, may render plugin near useless), fill in meta boxes using a little html magic, or fill in inivisble meta boxes. The last option is ideal because this stops the user from accidentally changing something, which could break the plugin or at least the reading of one of their posts. To add and save meta boxes we need something like:
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="err">/&lt;em&gt;*</span>
</span><span class='line'><span class="o">*</span> <span class="nx">Setup</span> <span class="nx">meta</span> <span class="nx">box</span> <span class="nx">spot</span> <span class="k">in</span> <span class="nx">edit</span> <span class="nx">post</span> <span class="nx">action</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/em&gt;/</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">function</span> <span class="nx">metabox</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'><span class="c1">// Post meta box&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">add_meta_box</span><span class="p">(</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// this is HTML id of the box on edit screen</span>
</span><span class='line'>        <span class="s1">&#39;difficulty&#39;</span><span class="p">,</span>
</span><span class='line'><span class="c1">// title of the box</span>
</span><span class='line'>        <span class="s1">&#39;Platforms &amp;amp;amp; Difficulty Plugin&#39;</span><span class="p">,</span>
</span><span class='line'><span class="c1">// function to be called to display the checkboxes, see the function below</span>
</span><span class='line'>        <span class="s1">&#39;meta_box_content&#39;</span><span class="p">,</span>
</span><span class='line'><span class="c1">// on which edit screen the box should appear</span>
</span><span class='line'>        <span class="s1">&#39;post&#39;</span><span class="p">,</span>
</span><span class='line'><span class="c1">// part of page where the box should appear</span>
</span><span class='line'>        <span class="s1">&#39;side&#39;</span><span class="p">,</span>
</span><span class='line'><span class="c1">// priority of the box</span>
</span><span class='line'>        <span class="s1">&#39;default&#39;</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="c1">// at the add_meta_boxes hook run our function and create the meta box</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span> <span class="s1">&#39;add_meta_boxes&#39;</span><span class="p">,</span> <span class="s1">&#39;metabox&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="err">/&lt;em&gt;*</span>
</span><span class='line'><span class="o">*</span> <span class="nx">Fill</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">meta</span> <span class="nx">box</span> <span class="kd">with</span> <span class="nx">check</span> <span class="nx">boxes</span> <span class="nx">and</span> <span class="nx">radio</span> <span class="nx">buttons</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/em&gt;/</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">meta_box_content</span><span class="p">(</span> <span class="nx">$post_id</span> <span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">global</span> <span class="nx">$post</span><span class="p">;</span> <span class="c1">// Needed if you want to access global post information.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// nonce field for security check, you can have the same</span>
</span><span class='line'><span class="c1">// nonce field for all your meta boxes of same plugin</span>
</span><span class='line'><span class="nx">wp_nonce_field</span><span class="p">(</span> <span class="nx">plugin_basename</span><span class="p">(</span> <span class="nx">__FILE__</span> <span class="p">),</span> <span class="s1">&#39;nonce&#39;</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// make more unique - assures security between post</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Adds the invisible meta field for necessary data</span>
</span><span class='line'><span class="c1">// &quot;_&quot; prefix makes field invisible for user editing</span>
</span><span class='line'><span class="nx">add_post_meta</span><span class="p">(</span>
</span><span class='line'>    <span class="nx">$post_id</span><span class="p">,</span> <span class="c1">// Post that is receiving the values</span>
</span><span class='line'>    <span class="s1">&#39;_some_val&#39;</span><span class="p">,</span> <span class="c1">// Meta variable name</span>
</span><span class='line'>    <span class="s2">&quot;some info&quot;</span><span class="p">,</span> <span class="c1">// Value being entered into the variable &#39;_some_val&#39;</span>
</span><span class='line'>    <span class="kc">true</span> <span class="c1">// Make unique, so don&#39;t allow multiple copies to be created</span>
</span><span class='line'><span class="p">);</span> <span class="c1">// Since we make sure the variable is only</span>
</span><span class='line'><span class="c1">// allowed to be created if unique, I run this</span>
</span><span class='line'><span class="c1">// at the beginning of edit action to be sure</span>
</span><span class='line'><span class="c1">// the variable exists before I start working with the post</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$val</span> <span class="o">=</span> <span class="nx">get_post_meta</span><span class="p">(</span> <span class="nx">$post_id</span><span class="p">,</span> <span class="s1">&#39;_some_val&#39;</span><span class="p">,</span> <span class="kc">true</span> <span class="p">);</span> <span class="c1">// Gets the value for</span>
</span><span class='line'><span class="c1">// &quot;_some_val,&quot; which would be &quot;some info&quot; if we just created, but</span>
</span><span class='line'><span class="c1">// could be some unique info if the user has interacted with the plugin on this post before.</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Getting post meta information here so that I can fill in our html so that it</span>
</span><span class='line'><span class="c1">// looks like the post &quot;remembered&quot; its meta information.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">echo</span> <span class="s2">&quot;&quot;</span><span class="p">;</span> <span class="c1">// Insert some html and use get_post_meta variables to fill it in so it looks the way they saved it</span>
</span><span class='line'>
</span><span class='line'><span class="k">return</span> <span class="nx">$post_id</span><span class="p">;</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span> <span class="c1">// we don&#39;t need to add_action because its referred as the meta box function in our above</span>
</span><span class='line'><span class="c1">// function - its registered as the function that actually fills it in&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="err">/&lt;em&gt;*</span>
</span><span class='line'><span class="o">*</span> <span class="nx">Save</span> <span class="nx">our</span> <span class="nx">meta</span> <span class="nx">box</span> <span class="nx">data</span> <span class="nx">into</span> <span class="nx">invisble</span> <span class="nx">meta</span> <span class="nx">fields</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/em&gt;/</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">save_meta</span><span class="p">(</span> <span class="nx">$post_id</span> <span class="p">)</span> <span class="p">{</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">pre</span><span class="o">&gt;&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="nx">global</span> <span class="nx">$post</span><span class="p">;</span>
</span><span class='line'><span class="c1">// check if this isn&#39;t an auto save</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nx">defined</span><span class="p">(</span> <span class="s1">&#39;DOING_AUTOSAVE&#39;</span> <span class="p">)</span> <span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">amp</span><span class="p">;</span><span class="o">&amp;</span><span class="nx">amp</span><span class="p">;</span><span class="nx">amp</span><span class="p">;</span> <span class="nx">DOING_AUTOSAVE</span> <span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$post_id</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">else</span><span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="o">!</span><span class="nx">wp_verify_nonce</span><span class="p">(</span> <span class="nx">$_POST</span><span class="p">[</span><span class="s1">&#39;nonce&#39;</span><span class="p">],</span> <span class="nx">plugin_basename</span><span class="p">(</span> <span class="nx">__FILE__</span> <span class="p">)</span> <span class="p">)</span> <span class="p">){</span>
</span><span class='line'><span class="c1">// be sure the _POST[&#39;nonce&#39;] matches your nonce from above - must be the</span>
</span><span class='line'><span class="c1">// same to work, but should be unique from other things</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// called after a post or page is saved and not on autosave</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span> <span class="nx">$parent_id</span> <span class="o">=</span> <span class="nx">wp_is_post_revision</span><span class="p">(</span> <span class="nx">$post_id</span> <span class="p">)</span> <span class="p">){</span>
</span><span class='line'>        <span class="nx">$post_id</span> <span class="o">=</span> <span class="nx">$parent_id</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// now store data in custom fields based on checkboxes/radios selected</span>
</span><span class='line'>    <span class="nx">$val</span> <span class="o">=</span> <span class="nx">$_POST</span><span class="p">[</span><span class="s1">&#39;_some_val&#39;</span><span class="p">];</span>
</span><span class='line'>    <span class="c1">// grabs the current data from the html we used in the above function</span>
</span><span class='line'>    <span class="nx">update_post_meta</span><span class="p">(</span> <span class="nx">$post_id</span><span class="p">,</span> <span class="s1">&#39;_some_val&#39;</span><span class="p">,</span> <span class="nx">$val</span> <span class="p">);</span>
</span><span class='line'><span class="c1">// updates information with what grabbed from the post submit</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="err">/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="p">}</span>
</span><span class='line'><span class="nx">add_action</span><span class="p">(</span>  <span class="s1">&#39;save_post&#39;</span><span class="p">,</span> <span class="s1">&#39;save_meta&#39;</span> <span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
Now with the above set of functions we just need to utilize our meta variables to insert something into the post, as I showed earlier in this post. If you'd like to see my project where I put all of this information together go to <a href="https://github.com/jphenow/WP-Difficulty-and-Platform/blob/master/difficulty.php" target="_blank">my github</a>. As development proceeds I will be adding a global settings page where users can change everything about the plugin. Currently my plugin allows them to pick associated platforms so I'd like to allow them to change the icons and even what they're including on each page. For instance instead of the plugin specifying platform or difficulty they can specify what general people or topics are being discussed on a post.</p>
]]></content>
  </entry>
  
</feed>
